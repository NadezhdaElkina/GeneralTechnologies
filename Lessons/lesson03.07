Лекция 03.07

Мы можем накладывать некоторые ограничения на колонки, 
когда мы их создаем или на уже существующую таблицу. 


Эти ограничения называются констрейны. Это специальные 
ключевые слова, которые мы прописываем при создании БД, 
они позволяют контролировать некое поведение поля.

Констрейн not null - указывает на то, что в поле 
невозможно будет записать значение = null. Обойти 
такое ограничение не удастся. По синтаксису 
констрейны пишутся после того, как мы определяем 
тип данных переменной:

use factory;

create table staff (

id int,

first_name varchar(255) not null,

);



Когда мы создадим эту таблицу, если мы попытаемся 
добавить значение null в поле first_name, на котором 
стоит констрейн, мы получим ошибку.

Также констрейны можно делать на уже существующей БД, 
а не только при создании таблицы, но при этом 
необходимо сначала убедиться, что в записях, на которые 
мы собираемся ставить констрейн not null не присутствует null



Констрейн unique - говорит о том, что значение в этой колонке 
во всех строках должно быть уникальным.

При попытке записать повторяющееся значение, получим ошибку, 
таким образом констрейн контролирует отсутствие дублей:

create table satff (

id int,

first_name varchar(250) not null,

last_name(250) unique

);

Unique полезен для колонок с номерами телефонов или адресами e-mail



Констрейн check - проверяет, что значение, которое мы 
пытаемся поместить в определенное поле, соответствует заданному условию.

create table staff;

age int check(age between 18 and 55);



Констрейн primary key - первичный ключ. Его обычно 
используют с каким-то уникальным полем, то есть 
таким полем, которое уникально идентифицирует 
строку в БД. Обычно это поле id.

Primary key это по сути объединение двух констрейнов - not null и unique

Практически всегда в любой таблице существует первичный ключ, 
особенно если БД состоит более чем  из нескольких таблиц, 
которые могут как-то пересекаться между собой. Тогда, если 
в одной таблице будет установлен первичный ключ, он будет 
являться внешним ключом к другой таблице.

create table staff(

id int primary key

); 

Вариант написания первичного ключа последней строкой:

create table staff(

id int,

first_name varchar(250) not null,

last_name(250) unique,

age int check(age between 18 and 55),

PRIMARY KEY (id)

);



Констрейны также можно добавить к уже существующим таблицам, 
но сначала нужно убедиться, что в полях, на которые ставится 
констрейн, записи не противоречат ему. Затем нужно проапдейтить 
эти записи (alter table + modify) и потом установить констрейн.

Лучше продумывать констрейны на этапе проектирования.

Также первичный ключ может быть составным, то есть он может 
состоять из нескольких полей.

Зачастую primary key идет в паре с таким понятием, как auto_increment, 
который отвечает за авто увеличение значения этого поля, то есть 
позволяет автоматически задавать значения для primary key:

craete table staff(

id int primary key auto_increment

);

При этом при использовании автоинкремента теперь не нужно 
прописывать колонку и значение для нее при заполнении новых 
строк, БД автоматически сделает это сама:

insert into staff (first_name, age) values (’Max’, 25);

После команды truncate первичный ключ обнуляется. 
После команды delete счетчик автоинкремента обнулен не будет, 
а в новых строках будет продолжен с того значения, 
которое было последним до команды delete

Значение по умолчанию - оператор default

create table staff(

id int primary key auto_increment,

first_name varchar(250) not null,

last_name(250) unique,

salary int default 1000

);


Для полей, для которых не будет установлено значение по 
умолчанию и не было прописано значения, запишется null.



Устанавливаем констрейн not null на поле, в котором уже есть значение null:

select * from staff;

update staff

set first_name = ‘ ’

where id  = 2;

alter table staff

modify column first_name varchar(250) not null;

Затем уже вместо пустой строки можем прописать в строке имя.



Задачи с лекции:

Создать таблицу студентов с полями name ≠ null, last_name ≠ null, 
avg_mark (от 0 до 5) использовать numeric, 
gender varchar(1) который должен принимать значения ‘M’ или ‘F’:

craeste table students(

name varchar (50) not null,

last_name varchar (50) not null,

avg_mark numeric (2, 1) check (avg_mark between 0 and 5),

gender varchar(1) check (gender in (’M’, ‘F’))

);

Добавить в таблицу записи:

Oleg Olegov, 4.3, M

Stepan Stepanov, 3.1, M

Olga Stepanova, 4.7, F

Igor Romanov, 3.1, M

Alexandra Alexandrova, 2.2, F


insert into students values (’Oleg ’, ‘Olegov’, 4.3, ‘M’),

                                           (’Stepan’, ‘Stepanov’, 3.1, ‘M’),

                                           (’Olga’, ‘Stepanova’, 4.7, ‘M’),

                                           (’Igor’, ‘Romanov’, 3.1, ‘M’),

                                           (’Alexandra’, ‘Alexandrova’, 2.2, ‘F’);



Добавить в таблицу students поле id, которое будет 
первичным ключом с автоувеличением

alter table students

add id int primary key auto_increment;



Поменять тип данных у колонки gender с varchar на char:

alter table students

modify gender char(1);



Переименовать поле name в first_name:

alter table students

change name first_name varchar(50);



Найти студентов с оценкой > 4,

Найти студентов у которых оценка не попадает в 
диапазон от 3 до 4 включая границы,

Найти студентов, у которых имя начинается на ‘О’,

Найти студентов, у которых оценкой является одно 
из следующих значений: 2.2, 3.1, 4.7


select * from students where avg_mark > 4;

select * from students where avg_mark ≤ 3 and avg_mark ≥ 4;

select * from students where first_name like ‘O’;

select * from students where avg_mark in (2.2, 3.1, 4.7);


Создать представление, где пол является М,

Создать представление, где пол является F:

create view v_students_M as

select * from students where gender = ‘M’;

create view v_students_F as

select * from students where gender = ‘F’;



View это не реальная таблица, а сохраненный текст/ код запроса, 
при селекте из view в него подставляется код этого сохраненного 
запроса. View  удобно использовать для переиспользования запросов. 
Единственный минус View  - она не обновляется динамически при изменении таблицы.



Найти и выбрать все уникальные оценки:

select distinct avg_mark 

from students;


Поменять фамилию ‘Stepanova’ на ‘Romanova’

update students

set last_name = ‘Romanova’

where last_name = ‘Stepanova’;
