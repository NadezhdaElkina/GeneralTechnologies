Лекция 19.06

Alias - это имя переменной, которое мы можем задать самостоятельно для колонки.
Пишем название поля, затем as, затем альяс - заданное имя для этого поля

use hr;

select * from employees;

select first_name as name, last_name as surname;

То есть с помощью альясов можно переименовывать колонки для выборки, но при этом 
в исходной БД ничего не меняется.

Также мы можем добавить в таблицу выборки свое поле и на лету присвоить ему альяс: 
select last_name as surname, ‘staff’ as staff fomvemployees;

Математические функции.

Если значение поля числовое, то можно производить с ним математические операции: 
select (salary - 10000) as slary_minus

from employees;

select first_name, last_name as surname,

salary * commission_pct as netto

from employees

where salary * commission is not null;



Функция возведения в степень:

 
select power(3, 2);     // 3 в степени 2

select power(salary, 2) from employees;   // salary возводим в **

При этом, если мы не задаем колонке альяс, то колонка будет иметь заголовок 

select power(3, 2); поэтому лучше сразу задавать альясы: 

select power (salary, 2) as powered_salary;



Функция получения квадрата:
 
select sqrt(25);



Функция число по модулю:
 
select abs(-134);   // по модулю 134


Функция округления:

sleect round(2.33354567, 2)  // 1e число - что округляем, 2-е  - до скольки знаков после запятой.



Строковые функции.


Конкатенация: 

select concat(first_name, ‘ ’, last_name) as fio from employees;    //пробел - ‘ ’ - для разделения

Конкатенация с указанием разделителя: 

select concat_ws(’ ’, first_name, last_name) as fio from employees;   //первым указываем разделитель, 
потом через запятую строки, которые нужно конкатенировать.



Функция length - возвращает длину строки(количество символов в строке):

select length(first_name) as first_name_length, first_name

from employees;  // выведутся две колонки - с длиной и с именем



Функция удаления пробелов:

select ltrim(’       hello’) as str1; // удалит пробелы слева

select rtrim(’hello       ’) as srt2;  // удалит пробелы справа

select trim(’    hello     ’)as srt3; // удалит пробелы с обеих сторон



Функция вхождения подстроки в строку (выводит позицию вхождения):

select locate(’l’, ‘hello’);  // результат - 3

select locate(’el’, ‘hello’); // результат - 2



Функция, которая позволяет взять слева - справа определенное количество символов:

select left(’hello’, 3);    // результат -  hel

select right(’hello, 3’);  //результат  -  llo

Вместо фиксированного слова/строки подставляем поле таблицы, которое нас интересует.



Функция substring - позволяет вырезать из строки подстроку

Первым параметром передаем строку, вторым - с какого символа вырезаем, 
третьим - до какой позиции вырезаем. Можно указать 2 или 3 параметра:

select substring(’hello’, 3);

select substring(’hello’, 2, 2);



Кроме этого для работы со строками есть функции:

reverse(); // переворачивает строку

lower(); // приводит к строчным буквам

upper();  //   приводит к заглавным буквам


Замена подстроки в строке. Первым параметром передаем строку, в которой ищем, 
вторым - что заменяем, третьим - на что заменяем.

select replace(’hello world’, ‘world’, ‘all’ );



Оператор distinct позволяет выбрать уникальные поля.

Дубли - это проблема всех БД, оператор distinct  - ресурсозатратный, поэтому его используем, 
только если есть уверенность в том, что дубли появились не в результате ошибки, неправильного запроса.

select distinct job_id

from employees;

Оператор сортировки order by  - указываем всегда в конце запроса

select salary

from employees

order by salary; // по умолчанию сортировка по возрастанию

select salary

from employees

order by salary desc;  // сортировка по убыванию

select salary

from employees

order by salary asc;   //  также сортировка по возрастанию

пример запроса с order by:

select salary from employees

where salary > 10000

order by salary;

Аналог условия if - else  в sql оператор case.

сортируем работников по ЗП -  мало, средне или много зарабатывают

select first_name, last_name, salary

case

     when salary < 10000 then ‘low’,

     when salary ≥ 10000 and salary <20000 then ‘medium’,

     when salary ≥ 20000 then ‘high’

end as category

from employees;

case- end является одним запросом, в результате него будет выведено одно поле, 
значения в него будут подставлены в зависимости от величины ЗП, 
case - end также как и  if - else можно чейнить

Условие else в case - end выполняются, если значения, которые не входят ни в одно из предыдущих условий:

case

     when salary < 10000 then ‘low’,

     when salary ≥ 10000 and salary <20000 then ‘medium’,

     when salary ≥ 20000  and salary <30000 then ‘high’,

else ‘very high’

end as category

from employees;

Задача - вывести среднее значение ЗП для сотрудников, которые зарабатывают <10000

Функция для рассчета среднего значения - avg()

select avg(

case

when salary < 10000 then salary

else null

end)

from employees;

Задача - вывести имена сотрудников и фамилии. Если сотрудник получает < 10000, 
то вывести 1 в поле info, если > 10000, то вывести 0 в поле info

select first_name, last_name,

case

when salary < 10000 then 1

else 0

end as info

from employess;

В SQL  к одной единице записи относится одна строка.

Задача - вывести модели самолетов, если самолет пролетает от 1000 до 2500, то он short-haul, 
если самолет пролетает от 2500 до 6000, то он medium-haul, 
если самолет пролетает больше 6000, то он long-haul

select model_name

 case

when distance > 1000 and distance ≤ 2500 then ‘low-haul’,

when distance > 2500 and distance ≤ 6000 then ‘medium-haul’,

when distance > 6000 then ‘long-haul’

end as category

from airliners;

Самолеты, которые не подпадают ни под одно из условий из запроса выше, 
должны быть определены как undefined:

select model_name

 case

when distance > 2000 and distance ≤ 2500 then ‘low-haul’,

when distance > 2500 and distance ≤ 6000 then ‘medium-haul’,

when distance > 6000 then ‘long-haul’,

else ’undefined’

end as category

from airliners;
