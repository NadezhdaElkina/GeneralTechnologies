Лекция 12.06

SQL - язык структурированных запросов. 
MySQL, Oracle итд - это СУБД, т.е. системы управления базами данных, 
некая реализация страндарта SQL.

SQL - набор правил языка, СУБД  - реализация этого языка со своими специфическими особенностями.

В SQL данные хранятся в виде определенного набора таблиц. 

SQL - четко структурированный язык.

В NoSQL - not only SQL - данные хранятся в виде binary JSON (например, база данных Mongo), 
в NoSQL можно хранить абсолютно неструктурированные данные. Выбор между SQL и NoSQL 
определяется потребностями конкретного проекта и конкретных задач.

В процессе работы с SQL мы пишем определенные запросы и отправляем их в определенном формате 
на SQL сервер. Сервер обрабатывает запрос, получает данные, которые нам нужны и возвращает 
их нам в виде результата. 

Под запросом понимается SQL команда, которая позволяет нам что-то получить из базы данных, 
либо что-то записать в нее, либо изменить структуру базы данных.

Формат запросов для выборки начинается с ключевого слова select:

select        // выбрать все поля
from         // ключевое слово
Users        // название таблицы, откуда выбираем

В качестве результата получаем таблицу.

select *    // выбрать все

select id, name    // через запятую перечисляем названия полей, которые нужно выбрать.

Каждый запрос должен заканчиваться точкой с запятой. 

drop database;   // удалить базу данных (не использовать на проекте!)

create database <имя базы>;  // создать базу данных

use <имя базы>;   // использовать далее данную базу

В системе на одном и том же сервере может находиться большое количество БД, с помощью 
команды use <имя БД>;  указываем, с какой конкретно БД мы будем работать, эту команду
 необходимо выполнять каждый раз, когда переоткрываем workbench.

В workbench левая молния выполняет весь скрипт целиком, вторая молния выполняет 
предыдущий (то есть последний запрос, который был написан).

Для того, чтобы сделать определенную фильтрацию из БД, можно использовать условие, то есть оператор where:

select * from employees
where department_id = 90;

Оператор where накладывает фильтрацию на весь результат выборки, то есть сначала будут 
выбраны все строки, а потом из них будут определены те, которые подпадают под условие 
выборки и выведены в качестве результата.

Какие бы условия не были написаны, какие бы выборки не были сделаны, 
оператор select никогда не изменяет данные в БД.

В условии where мы можем сравнивать со строкой для фильтрации выборки: 
select from employees
where job_id = ‘FI_ACCOUNT’

Оператор between - применяем, когда нужно указать значение, лежащее в каких-то границах (диапазоне):

select * from employees
where salary between 10000 and 20000; 

Условия запросов можно конкатенировать между собой с помощью операторов in, or и and

Оператор or  - применяем, когда нужно указать несколько полей для условия выборки:
select * from employees
where department_id = 60 or
           department_id = 90 or

           department_id = 100;

Оператор in - применяется, когда нужно выбрать из некоего списка, или также набора нескольких полей: 
select * from employees
where department_id in (60, 90, 100);

Если мы хотим выбрать наоборот значения, которые НЕ входят в какой-то список полей: 

select * from employees
where department_id <>60 and

           department_id <>90 and 

           department_id <>100;

//  коротка запись этого запроса: 
select * from employees
where department_id not in (60, 90, 100);

Для сравнения строк по вхождению используем оператор like:

// задание - найти всех сотрудников, у которых фамилия заканчивается на ‘a’:
select * from employees
where last_name like ‘%a’;

%x - означает любое количество символов до искомого вхождения, 

x% - любое количество символов после искомого вхождения,

%x% - если ищем вхождение в середине

Оператор like очень ресурсозатратный

null - это отдельный вид значения в SQL, это неопределенное значение

Поля, в которых нет записи устанавливаются как null

Оператор для вывода полей со значение null  -  is null
select * from employees
where commission_pct is null;

Чтобы наоборот, выбрать те поля, значения которых не являются null используем оператор 

is not null
